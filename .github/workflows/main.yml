name: release
on: push
  # push:
  #   branches:
  #     - 'v*'
jobs:
  build-linux:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v1

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v1
        with:
          node-version: 10

      - name: Build/release Electron app
        uses: samuelmeuli/action-electron-builder@v1
        with:
          # GitHub token, automatically provided to the action
          # (No need to define this secret in the repo settings)
          github_token: ${{ secrets.github_token }}

          # If the commit is tagged with a version (e.g. "v1.0.0"),
          # release the app after building
          release: ${{ startsWith(github.ref, 'refs/tags/v') }}
    # runs-on: ubuntu-latest
    # steps:
    # # checkout master
    # - uses: actions/checkout@master
    #   with:
    #     ref: master
    # # setup node
    # - uses: actions/setup-node@master
    #   with:
    #     node-version: 10.16
    # # See if we're on the right repo lol
    # - name: Sanity check
    #   run: ls
    # - name: Crazy docker stuff
    #   run: |
    #     docker run --rm \
    #     --env-file <(env | grep -iE 'DEBUG|NODE_|ELECTRON_|YARN_|NPM_|CI|CIRCLE|TRAVIS|APPVEYOR_|CSC_|_TOKEN|_KEY|AWS_|STRIP|BUILD_') \
    #     -v ${PWD}:/project \
    #     -v ~/.cache/electron:/root/.cache/electron \
    #     -v ~/.cache/electron-builder:/root/.cache/electron-builder \
    #     electronuserland/builder:wine \
    #     /bin/bash -c "yarn --link-duplicates --pure-lockfile && yarn release --linux --win --publish never"
    # - name: Check dist
    #   run: ls dist
    # - name: Create Release
    #   id: create_release
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     tag_name: ${{ github.ref }}
    #     release_name: Release ${{ github.ref }}
    #     draft: false
    #     prerelease: false
    # - name: Upload Release Asset - Linux
    #   id: upload-release-asset-lin
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: ./dist/Slippi-Scripts-GUI.AppImage
    #     asset_name: Slippi-Scripts-GUI
    #     asset_content_type: application/*
    # - name: Upload Release Asset - Windows
    #   id: upload-release-asset-win
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: ./dist/Slippi-Scripts-GUI.exe
    #     asset_name: Slippi-Scripts-GUI
    #     asset_content_type: application/*
